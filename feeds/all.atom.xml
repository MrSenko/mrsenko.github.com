<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Mr. Senko - Open Source Wizards</title><link href="http://mrsenko.com/" rel="alternate"></link><link href="http://mrsenko.com/feeds/all.atom.xml" rel="self"></link><id>http://mrsenko.com/</id><updated>2016-03-30T14:30:00+03:00</updated><entry><title>March 2016 Report</title><link href="http://mrsenko.com/blog/2016/03/30/march-2016-report/" rel="alternate"></link><updated>2016-03-30T14:30:00+03:00</updated><author><name>Alexander Todorov</name></author><id>tag:mrsenko.com,2016-03-30:blog/2016/03/30/march-2016-report/</id><summary type="html">&lt;p&gt;Here is a quick status report for &lt;a href="http://MrSenko.com"&gt;Mr. Senko&lt;/a&gt;. During
March 2016 I've worked on:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A few more improvements to
&lt;a href="https://github.com/gilsondev/pelican-clean-blog/pulls?q=is%3Apr+author%3Aatodorov+is%3Aclosed"&gt;pelican-clean-blog&lt;/a&gt;
theme;&lt;/li&gt;
&lt;li&gt;Two new features for 
&lt;a href="https://github.com/getpelican/pelican/pulls/atodorov"&gt;Pelican&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;Several bug fixes and improvements for
&lt;a href="https://github.com/Nitrate/Nitrate/pulls/atodorov"&gt;Nitrate&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Nitrate Test Case Management System&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://nitrate.readthedocs.org/en/latest/guide/introduction.html"&gt;Nitrate&lt;/a&gt; is
a test case management system written with Django. We use it internally to track
testing activities. It is reasonably good at what it does but there are some
issues with how the software has been developed in the past.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Nitrate is Django based but doesn't follow best Django practices.
There are places where it executes raw SQL against the DB instead of using
Django's ORM model. This makes it non-portable between DBMS.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Nitrate has a long development history but poor documentation. It has introduced
DB migrations and updates in a non-Django friendly way. The currently preferred
method is to execute an SQL file against the DB. This is poorly documented and
of course I've missed it. I'm sure others will miss it as well.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Going forward with native Django migrations all of these SQL files need to be
converted and I haven't looked into this yet. Another possibility is to just release
a new version which doesn't allow automatic DB updates.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There are a bunch of static files (e.g. images) used directly in CSS and JavaScript files.
This immediately breaks if you decide to host your static files elsewhere
(e.g. Amazon S3 bucket). There is an easy fix but it requires the use of latest Django.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Django version (and other dependencies) are quite old. This introduces security
risk and also makes it harder to develop new functionality sometimes. I have opened
a PR to bring Django forward to 1.8.11 version but that still needs more work.
Yes I broke the test-suite as part of the migration.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;So far my impression is that the Nitrate team are slow to respond on GitHub.
Given the current state of Nitrate and the amount of work which needs to be done
this is disappointing.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you like my work and need a faster response cycle please
&lt;strong&gt;consider subscribing to &lt;a href="http://mrsenko.com/subscribe.html"&gt;Mr. Senko&lt;/a&gt;!&lt;/strong&gt;&lt;/p&gt;</summary><category term="Python"></category></entry><entry><title>Why Your Open Source Bugs Will Not Be Fixed</title><link href="http://mrsenko.com/blog/2016/02/14/why-your-open-source-bugs-will-not-be-fixed/" rel="alternate"></link><updated>2016-02-14T17:30:00+02:00</updated><author><name>Mr. Senko</name></author><id>tag:mrsenko.com,2016-02-14:blog/2016/02/14/why-your-open-source-bugs-will-not-be-fixed/</id><summary type="html">&lt;p&gt;Here at Mr. Senko we've been researching why many bugs reported against
open source projects don't get fixed. This is not surprising given that many
contributors to open source use the "scratch your own itch" principle.
We've been talking to various people why some bugs are left open. We've
reached both open source maintainers and users and here are the results.&lt;/p&gt;
&lt;h2&gt;Time is Code&lt;/h2&gt;
&lt;p&gt;The core of the problem revolves around time constraints. Open source developers
are limited by the time they have to work on the project, even more so if they
are volunteers. Their focus is on critical and high priority issues and driving
the project through its roadmap and they don't have enough time for you.
The side effect of this is that many smaller
issues are dealt with only if there is free time left.
Some factors to consider here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Not being able to reproduce the bug because it requires a particular
environment or is not explained very well;&lt;/li&gt;
&lt;li&gt;The bug is not immediately affecting the developer and they have
little incentive to fix it;&lt;/li&gt;
&lt;li&gt;There is a limited number of users who are affected by the bug and it
is not getting the priority or visibility it needs to be fixed by the
developer;&lt;/li&gt;
&lt;li&gt;Reviewing pull requests and discussing contributions is integral part of
open source. Usually only the core developers of the project are doing this
which limits even more their time to work on other issues;&lt;/li&gt;
&lt;li&gt;Popular projects, especially with exponential user-base growth are flooded
with feature requests and minor priority bug reports. Although these will
help the project become better in the long-run they reduce the free time
available to developers because they constantly have to review and keep track
of all these reports while still working on the current version;&lt;/li&gt;
&lt;li&gt;Lack of adequate testing or sufficient test coverage makes it harder to
accept new features and fix existing bugs;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You see where this is going - the more problems there are, the less time there
is to fix them and the problems pile up even more, shrinking the available time
as we go along.&lt;/p&gt;
&lt;p&gt;Larger and more popular projects tend to exhibit more severe problems arising
from the above factors. Of the top 1000 Python, Ruby and Node.js packages
the average time an issue spends between open and closed is around 30 days,
some projects going to the extremes of 100s of days. All of this because the
developer to user ratio in these projects is too low.
On the other hand smaller communities are usually more responsive and
easier to work with. From our experience single developer projects tend to
respond within 2 days on average.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How to Help&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If a smaller project works for you and the developer is responsive enough
don't switch to a more popular one unless needed;&lt;/li&gt;
&lt;li&gt;If you have the technical capability provide help in code review and
pull requests discussion. Often spotting formatting mistakes or instructing
the contributor to squash their commits, provide short description in the docs
or a few tests will go a long way in helping the core group of developers;&lt;/li&gt;
&lt;li&gt;Provide clear steps to reproduce a bug, even better provide automated test
case for it. If you require a specialized setup try to provide a system where
the bug is present so the developer can debug live;&lt;/li&gt;
&lt;li&gt;Provide QA expertise by writing and executing test plans against new versions
of the project, even better contribute automated tests for that;&lt;/li&gt;
&lt;li&gt;Spend some time to investigate and increase test coverage. You may be using
the non-covered code and the next upgrade will break it without tests;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Leadership, Management and Politics&lt;/h2&gt;
&lt;p&gt;Less frequently cited problems are in the fields of leadership, project
management and community politics.
On the extreme end here we see projects which are not under active development
anymore but are still widely adopted by the general public. This is the case
with some of Node.js most downloaded packages. In the same category are also
projects which do have some development community(possibly with write access)
but it doesn't quite understand what the source code is doing and is not
able to promptly fix bugs or is unwilling to do so.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How to Help&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Become the secondary (or even primary) maintainer of the project if you have
the technical knowledge. If you want to step down announce your intentions
loud and clear and allow some time for the transition to take place.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Management and politics are often a problem in large and popular projects
where every developer has their own vision of how the project should evolve
and all of these visions need to be brought together and steered into a single
direction. In projects which are corporately sponsored there are trusted
developers who perform these tasks. In bigger projects there could even be
a management board who decides on where the project is going next and how
developer resources will be best utilized. For projects backed by a foundation
this is certainly the case.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How to Help&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Provide a management capacity who will serve on the project's board. That
person will help raise visibility to your particular issues but their general
task will be to help the project move forward. If they fail to do so the
relationship will simply not work. Some projects have a fixed term for board
members to prevent a single entity overtaking control of the project.&lt;/p&gt;
&lt;h2&gt;Lorem Ipsum&lt;/h2&gt;
&lt;p&gt;Being humans developers are not prone to simple facts that make their work
non-effective or slow.&lt;/p&gt;
&lt;p&gt;We've been told that some developers don't understand the bug-fix or more likely
the software development lifecycle. It sounds like we're talking about
inexperienced developers who managed to create a popular open source project
alone. Or maybe we're talking about developers who come from the start-up
scene while users are coming from the enterprise world and are used to working
in a different manner ? Either-way both parties have to learn from each other
and not allow tempers to rise too much.&lt;/p&gt;
&lt;p&gt;Others have claimed that some developers don't know how to ask for outside help or
are reluctant to give up control of their projects to external contributors.
We don't have data about how often this happens but apparently often enough
to be visible.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How to Help&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As a user (or developer) clearly communicate your intentions and expectations.
If you feel the other party doesn't quite understand you explain where are you
coming from. It is possible that you working environment and mental processes
are quite alien to them and they don't see the point in your words. If there is
a local technology user group or a near-by event then go meet the other guy
and buy them a beer.&lt;/p&gt;
&lt;h2&gt;Why Should You Care&lt;/h2&gt;
&lt;p&gt;If you are still reading then chances are you've experienced some of these
problems yourself. We certainly have seen quite a few from the list above.
The bottom line is that whenever you have problems with a particular open
source project don't expect somebody to help you. Open source comes at a
price and it is being able to help yourself or fix your own problems. Kind
of like buying a new car without a warranty and a mechanic.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Practical example - Sphinx&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Sphinx &lt;a href="https://github.com/sphinx-doc/sphinx/pull/1902"&gt;PR #1902&lt;/a&gt; introduces
new features to the inheritance diagram plugin but also adds new tests for
the existing code base as well as new tests for the proposed modifications.
6 months later and the PR is still open, not even undergone code review.
Later in commit 4c4450 the core devel team changes a parameter type in one
of the functions used by the inheritance diagram plugin. Not having any tests
for the caller code they make a backward incompatible change which is still
broken in the master branch. For the fix see 
&lt;a href="https://github.com/atodorov/sphinx/commit/d67fee57f000385cb48dba6cb1c725ddb0e0e2c0"&gt;commit d67fee&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Practical example - dnf-plugins-core&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;dnf download&lt;/em&gt; command in Fedora had a test suite which used badly
designed test stubs. They have been redesigned in
&lt;a href="https://github.com/rpm-software-management/dnf-plugins-core/pull/118"&gt;PR #118&lt;/a&gt;
but developers requested the refactoring be merged together with
&lt;a href="https://github.com/rpm-software-management/dnf-plugins-core/pull/113"&gt;PR #113&lt;/a&gt;
which also adds new functionality. 2 months afterwards comes
&lt;a href="https://github.com/rpm-software-management/dnf-plugins-core/commit/fe130669ffc4c1d6eba8f10cda35ab4d803d5a3d"&gt;commit fe1306&lt;/a&gt;
which changes behavior in the same plugin. The badly designed test stubs
ignored the change silently and it landed in the master branch. The newly
redesigned tests broke immediately but they were still under review and not
merged until 1 month later.&lt;/p&gt;
&lt;p&gt;Many developers and companies consuming open source software are OK
(or OK-ish) with this state of art. They've accepted that they have to
fix their own problems or work around them when the time comes.
This is how the open source is expected to work, isn't it ?&lt;/p&gt;
&lt;p&gt;If you happen to be from those folks who don't have enough technical
knowledge to work on a particular project or don't have the time to
do so please consider &lt;a href="http://mrsenko.com/subscribe.html"&gt;subscribing to Mr. Senko&lt;/a&gt;!
We're happy to provide open source support to those who need it.&lt;/p&gt;</summary></entry><entry><title>January 2016 Report</title><link href="http://mrsenko.com/blog/2016/02/03/january-2016-report/" rel="alternate"></link><updated>2016-02-03T22:30:00+02:00</updated><author><name>Alexander Todorov</name></author><id>tag:mrsenko.com,2016-02-03:blog/2016/02/03/january-2016-report/</id><summary type="html">&lt;p&gt;This is my first status report for &lt;a href="http://MrSenko.com"&gt;Mr. Senko&lt;/a&gt;. During
January 2016 I've worked on:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Improvements to
&lt;a href="https://github.com/gilsondev/pelican-clean-blog/pulls?q=is%3Apr+author%3Aatodorov+is%3Aclosed"&gt;pelican-clean-blog&lt;/a&gt;
theme&lt;/li&gt;
&lt;li&gt;URL updates in &lt;code&gt;package.json&lt;/code&gt; for several Node.js packages;&lt;/li&gt;
&lt;li&gt;.spec file to build RPMs for
&lt;a href="https://github.com/django-ses/django-ses/pull/83"&gt;django-ses&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;New test case for
&lt;a href="https://github.com/belgian-elixir-study-group/efl/pull/5"&gt;Elixir study exercises&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Updates to an old PR for
&lt;a href="https://github.com/sphinx-doc/sphinx/pull/1902"&gt;Sphinx&lt;/a&gt; which also fixes a
new regression;&lt;/li&gt;
&lt;li&gt;Filed a
&lt;a href="https://github.com/getpelican/pelican/issues/1902"&gt;RFE&lt;/a&gt; against Pelican
and will continue working on it this month.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Sphinx broke&lt;/h2&gt;
&lt;p&gt;The Sphinx changes are particularly interesting - the fix for
issue #656 in commit 4c4450d changes the Graphviz's
&lt;code&gt;node['options']&lt;/code&gt; type from &lt;code&gt;list&lt;/code&gt; to &lt;code&gt;dict&lt;/code&gt; which in turn breaks
&lt;code&gt;html_visit_inheritance_diagram()&lt;/code&gt; and the inheritance_diagram extension.&lt;/p&gt;
&lt;p&gt;My previous work on this PR introduced some basic tests, which were missing
and they caught the type change! Because the tests and my latest changes are
not yet merged into master the &lt;code&gt;inheritance_diagram.py&lt;/code&gt; extension is still
broken! The tests fail in Travis-CI but probably due to &lt;code&gt;dot&lt;/code&gt; not being
installed. Locally everything seems to work.&lt;/p&gt;
&lt;p&gt;Its also worth mentioning that it's been 2 weeks since I've updated my PR
and a bit more since Sphinx introduced the regression. As far as I can see
there's not been any updates with respect to this. 
If you'd like to get a
faster response cycle please &lt;strong&gt;consider subscribing to
&lt;a href="http://mrsenko.com/subscribe.html"&gt;Mr. Senko&lt;/a&gt;!&lt;/strong&gt;&lt;/p&gt;</summary><category term="Python"></category></entry><entry><title>FOSDEM 2016 Report</title><link href="http://mrsenko.com/blog/2016/01/31/fosdem-2016-report/" rel="alternate"></link><updated>2016-01-31T19:30:00+02:00</updated><author><name>Mr. Senko</name></author><id>tag:mrsenko.com,2016-01-31:blog/2016/01/31/fosdem-2016-report/</id><summary type="html">&lt;p&gt;Hello everyone, &lt;a href="http://MrSenko.com"&gt;Mr. Senko&lt;/a&gt; flew to Brussels for his first
public appearances and we are very excited about this. He visited
&lt;a href="http://fosdem.org"&gt;FOSDEM&lt;/a&gt; to get an update on the latest news in open source
and scored the highest ping-pong score for
&lt;a href="https://twitter.com/atodorov_/status/693762736765976576"&gt;BBC Open Source&lt;/a&gt;
on Sunday!
He also learned a bit about &lt;a href="http://elixir-lang.org"&gt;Elixir&lt;/a&gt; with the
Belgian Elixir Study group, attended a panel on open source and start-ups
organized by &lt;a href="http://europe.startupbus.com"&gt;The Startup Bus&lt;/a&gt;
and made lots of new friends. Here are some of
the details and links for further reading.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Ping-pong with computers" src="/images/bbc_ping_pong.jpg" title="Ping-pong with computers" /&gt;&lt;/p&gt;
&lt;h2&gt;Friday - Day 0&lt;/h2&gt;
&lt;p&gt;Friday was a fruitful day for Mr. Senko. It started with a meeting at
&lt;a href="http://betacowork"&gt;BetaCowork&lt;/a&gt; - one of the co-working spaces in Brussels
and continued with a visit to
&lt;a href="http://www.erlang-factory.com/brussels2016/"&gt;Brussels Erlang Factory Lite&lt;/a&gt;
where we learned a bit about Erlang and Elixir and even managed to create a
&lt;a href="https://github.com/belgian-elixir-study-group/efl/pull/5"&gt;small pull request&lt;/a&gt;
as part of the exercises. Funny enough, one of the organizers,
&lt;a href="https://twitter.com/less_software"&gt;Yuri Leikind&lt;/a&gt; was spot on to recognize our
Bulgarian accent.&lt;/p&gt;
&lt;p&gt;BetaCowork was bursting with people who've come for FOSDEM. There was a GNOME
team and the Libre Office Italian team! The place is huge and is definitely
an alternative for the entrepreneurs who are tired of working from home! It
is also very close to ULB so next time you visit FOSDEM definitely check their
events schedule as well.&lt;/p&gt;
&lt;h2&gt;Saturday - Day 1&lt;/h2&gt;
&lt;p&gt;Saturday was the
&lt;a href="https://fosdem.org/2016/schedule/track/testing_and_automation/"&gt;Testing and Automation&lt;/a&gt;
day. The morning track showed us &lt;a href="http://frida.re"&gt;Frida&lt;/a&gt; - a tool
which injects JavaScript into existing processes and could be used for testing
interoperability with closed source applications. Another interesting use case
is overriding the standard &lt;code&gt;read&lt;/code&gt; and &lt;code&gt;write&lt;/code&gt; functions in order to automate testing
of interactive text based applications on Linux. Mr. Senko had the pleasure talking
to Frida's authors on both days. These are extremely tallented and knowledgeable
folks so definitely keep an eye on their work.&lt;/p&gt;
&lt;p&gt;In the afternoon the room got packed when Marcin and Lukasz presented their
experience with
&lt;a href="https://github.com/jenkinsci/job-dsl-plugin"&gt;Jenkins Job DSL&lt;/a&gt; plugin.
The plugin is very flexible and powerfull, using Groovy
as its programming language. The only drawback is that it is
sometimes too complex to use and requires a steep learning curve.
Regardless of this the only tools we know about related to
Jenkins as Code are the Jenkins Job DSL and Jenkins Job Builder plugins.&lt;/p&gt;
&lt;p&gt;In the evening Mr. Senko visited a panel talk about
&lt;a href="https://www.eventbrite.com/e/startupbusaccelerate-the-impact-of-open-source-software-on-the-tech-industry-tickets-20869395925"&gt;the impact of open source on the tech industry&lt;/a&gt;
at the second big co-workign space in Brussels - &lt;a href="http://co-station.com"&gt;Co.Station&lt;/a&gt;.
The place is in the city center so definitely worth to visit at any time.
Mr. Senko made quite a few new friends there and possibly found potential
pilot customers. We've also made contact with the organizers of
&lt;a href="http://europe.startupbus.com"&gt;Startup Bus Europe&lt;/a&gt; and hopefully we'll see
the bus coming to Sofia as well. And we also got invited to the first
&lt;a href="https://www.linkedin.com/pulse/setting-up-first-angular-conference-belgium-sam-vloeberghs"&gt;Angular.js conference in Belgium&lt;/a&gt;
and with a bit of luck you'll see a talk from us in the summer.&lt;/p&gt;
&lt;h2&gt;Sunday - Day 2&lt;/h2&gt;
&lt;p&gt;Sunday was the lazy day. The only talk of interest to Mr. Senko was
&lt;a href="https://fosdem.org/2016/schedule/event/tweaking_ruby_gc/"&gt;Tweaking Ruby GC parameters for speed and profit&lt;/a&gt;
. The rest of the time was spent networking, collecting t-shirts,
reporting
&lt;a href="https://fedorahosted.org/fedora-infrastructure/ticket/5085"&gt;a bug against Fedora Account System&lt;/a&gt;
and meeting with old friends.&lt;/p&gt;
&lt;p&gt;&lt;img alt="hammer down" src="/images/bbc_hammer_game.jpg" title="hammer down" /&gt;&lt;/p&gt;
&lt;p&gt;In the early afternoon Mr. Senko played a few geeky games at the BBC Open Source
stand. BBC is developing the &lt;a href="https://www.microbit.co.uk/"&gt;micro:bit&lt;/a&gt; - a small computer which is intended to
teach programming to small children. With its help they has built a ping-pong
device which counts how many times you hit the ball.&lt;/p&gt;
&lt;p&gt;In the second game you had to smash a
red circle with a foam hammer as soon as it lighted up. Mr. Senko managed to
win the first game and then lost the second one. He even got to test the device
and tried to crash it by scoring penalty points when the counter was still zero.
BBC definitely did their job right because the device didn't crash.&lt;/p&gt;
&lt;p&gt;Thank you for taking the time to read this report. See you at the next event!&lt;/p&gt;</summary></entry><entry><title>Founding of Mr. Senko</title><link href="http://mrsenko.com/blog/2016/01/10/founding-of-mr-senko/" rel="alternate"></link><updated>2016-01-10T14:00:00+02:00</updated><author><name>Alexander Todorov</name></author><id>tag:mrsenko.com,2016-01-10:blog/2016/01/10/founding-of-mr-senko/</id><summary type="html">&lt;p&gt;Hello everyone, welcome to &lt;a href="http://MrSenko.com"&gt;Mr. Senko&lt;/a&gt;! We are a group of friends who have
been working with open source for the last 10 years. During this time we've
seen technologies come and go and hype projects becoming abandoned months later.
We've seen the pain when companies had to rewrite their software because of this
and the struggle to get your patches accepted upstream.
Don't you wish you had somebody who could take care of all the hassle for you?&lt;/p&gt;
&lt;p&gt;Mr. Senko is our attempt at providing commercial support for open source projects,
specifically libraries which other companies use to build their products. As of now
we have diverse experience in Java, Python and JavaScript as well as my personal
experience with Quality Assurance.&lt;/p&gt;
&lt;p&gt;In the next weeks and months we will be refining our value proposition and building
the team so we can offer you great technical support and expertise. We plan to blog
regularly about our progress and about technology and open source events in general! 
You can follow us at &lt;a href="https://twitter.com/Mr_Senko"&gt;@Mr_Senko&lt;/a&gt; or tweet at the wizard
using the &lt;strong&gt;#MrSenko&lt;/strong&gt; hashtag! &lt;/p&gt;
&lt;p&gt;Stay tuned for more news!&lt;/p&gt;</summary></entry></feed>